/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 *
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

package stdx.net.http

import stdx.encoding.url.URL

const TLS_CTX_SESSION_NAME = "CANGJIE-SERVER"
const MAX_METHOD_SIZE = 100
const MAX_LINE_SIZE = 8 * 1000 * 1024
const NULL_BYTE = "\0"
const CHUNK_SIZE = 8 * 1024
const DEFAULT_HEADER_CAPACITY = 8
let VALID_HOST_SYMBOLS: Array<Byte> = [
    // Refer to RFC spec, where sub-delims is:
    // https://www.rfc-editor.org/rfc/rfc3986#section-2.2
    //      sub-delims  = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
    //
    // Where unreserved is:
    // https://www.rfc-editor.org/rfc/rfc3986#section-2.3
    //      unreserved  = ALPHA / DIGIT / "-" / "." / "_" / "~"
    b'!', // sub-delims
    b'$', // sub-delims
    b'&', // sub-delims
    b'\'', // sub-delims
    b'(', // sub-delims
    b')', // sub-delims
    b'*', // sub-delims
    b'+', // sub-delims
    b',', // sub-delims
    b';', // sub-delims
    b'=', // sub-delims
    b'%', // pct-encoded (and used in IPv6 zones)
    b'-', // unreserved
    b'.', // unreserved
    b'_', // unreserved
    b'~', // unreserved
    b':', // IPv6address + Host expression's optional port
    b'[', // enclosing the IP literal
    b']' // enclosing the IP literal
]

// server.cj
const SERVER_COROUTINE_POOL_CAPACITY = 10 ** 4
const SERVER_COROUTINE_POOL_PREHEAT = 0
const SERVER_COROUTINE_POOL_QUEUE_CAPACITY = 10 ** 4
const CR: Byte = '\r'
const LF: Byte = '\n'
const WS: Byte = ' '
const SYMBOL_COLON: Byte = ':'
const SYMBOL_COMMA: Byte = ','
const SYMBOL_EQUAL: Byte = '='
const SEMICOLON: Byte = ';'
const ASTERISK = "*"
const SLASH = "/"
let HopByHopHeaders = ["proxy-connection", "keep-alive", "te", "transfer-encoding", "upgrade"]
let TrailerExcludeList = [Str("transfer-encoding"), Str("trailer"), Str("content-length")]

// operator ** is better than <<
// min value of max frame size
let MIN_FRAME_SIZE = UInt32(2 ** 14)
// max value of max frame size
let MAX_FRAME_SIZE = UInt32(2 ** 24 - 1)
let MAX_STREAM_ID: UInt32 = UInt32(2 ** 31 - 1)
// for flow-control
let MAX_WINDOW: UInt32 = UInt32(2 ** 31 - 1)
const DEFAULT_WINDOW_SIZE = 65535u32

// default value of concurrent streams
const DEFAULT_MAX_CONCURRENT_STREAMS = 100u32
// default header list size
const DEFAULT_MAX_HEADER_LIST_SIZE = 8192u32
// default body size limit is 2M
const DEFAULT_MAX_BODY_SIZE = 2 ** 21

// Default Empty URL
let EMPTY_URL = URL.parse("")

// num of stream pools, every connection claims a stream pool
let MAX_STREAM_POOLS_CAPACITY = 8192
let STREAM_POOLS_THRESHOLD = 100
// num of streams in a pool
let MAX_STREAM_POOL_CAPACITY = 100
// num of arrays of every provided size, arrays are used to convey frame payloads
let MAX_ARRAY_POOL_CAPACITY = 8192
let ARRAY_POOL_THRESHOLD = 100

// read write buffer size
const WRITE_CHUNK_SIZE = 4096
const READ_CHUNK_SIZE = 4096
